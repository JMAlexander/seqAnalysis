#! /usr/bin/env python

import sys
import os
import shutil
import tempfile
import scipy
import tables as tb
from multiprocessing import Pool


class cross_track:
    out_path = "/media/storage2/analysis/crosscorr"
    def __init__(self, h5, track1, track2, feature):
        self.h5 = h5
        self.track1 = track1
        self.track2 = track2
        self.feature = feature
        self.tmp_path = tempfile.mkdtemp(suffix=os.path.basename(feature)) 
        self.outfile = "/".join([out_path, feature, "_".join([track1, track2])])
        self.chrs_tbp = os.listdir(self.feature)

    #loop through chr
    def compute(self):        
        pool = Pool(processes=6)
        for chr_tbp in self.chrs_tbp:
            #compute_worker(self, chr_tbp)
            pool.apply_async(compute_worker, (self, chr_tbp))
        pool.close()
        pool.join()
        
        self.file_combine()

    def file_combine(self):        
        out = open(self.outfile, 'w')
        files_tmp = os.listdir(self.tmp_path)
        for file_tmp in files_tmp:
            a = open(self.tmp_path + "/" + file_tmp)
            for line in a:
                out.write(line)
        shutil.rmtree(self.tmp_path)
        out.close()

def compute_worker(obj, chrom):
   h5 = tb.openFile(obj.h5)
   sample1 = h5.getNode("/", obj.track1)
   sample2 = h5.getNode("/", obj.track2)
   sample1_data = sample1._f_getChild(chr_tbp)
   sample2_data = sample2._f_getChild(chr_tbp)

   anno_data = open(obj.anno + "/" + chr_tbp)
   anno_out_path = obj.tmp_path + "/" + chr_tbp
   anno_out = open(anno_out_path, 'w')
   
   start = 0
   end = 0
   vals1 = 0
   vals2 = 0
   corr = 0
   for line in anno_data:
       line = line.strip()
       sline = line.split()
   
       start = int(sline[1] - 1)
       end = int(sline[2])
       vals1 = sample1_data[start:end]
       vals2 = sample2_data[start:end]

       corr = scipy.signal.correlate(vals1, vals2, 'same')
       anno_out.write("\t".join([str(corr)]))
            
    anno_data.close()
    anno_out.close()
    h5.close()

def main(argv):
    
    

    

if __name__ == "__main__":
    main(sys.argv)
