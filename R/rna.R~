cuffdiff.path <- "~/s2/analysis/rna/cuffdiff"

CL.thresh <- function(de.file, FPKM=4, ratio=2, sig=TRUE, N=NULL, FDR=0) {
  de.data <- read.delim(de.file)
  
  ## Select signficants

  
  if (sig & FDR == 0) {de.data <- subset(de.data, de.data$significant=="yes")
  } else if (!sig & FDR == 0) {de.data <- subset(de.data, de.data$significant=="no")
  } else {
    #q <- p.adjust(de.data$p_value, method="BH")
    #de.data$FDR <- q
    #de.data <- de.data[de.data$FDR <= FDR, ]
    de.data <- de.data[de.data$q_value <= FDR,]
  }                         
  ## Select genes with log2 FPKM above given value
  de.data <- de.data[log(de.data$value_1, 2) >= FPKM | log(de.data$value_2, 2) >= FPKM, ]
  
  ## Select genes with absolute ratio above given value
  de.data <- transform(de.data, log2.FC = log(exp(ln.fold_change.), 2))
  de.data <- de.data[abs(de.data$log2.FC) >= ratio, ]
  de.data$rel <- "down"
  de.data$rel[de.data$log2.FC < 0] <- "up"

  #de.data$name2 <- id2names(de.data$test_id)
  de.data$strand <- id2strand(de.data$test_id)

  ## Combine isoforms
  de.data <- de.data[!duplicated(de.data$test_id),]
  
  if (!is.null(N)) {
    de.data.sp <- split(de.data, de.data$rel)
    tops <- lapply(de.data.sp, function(x) {
      q <- quantile(abs(x$log2.FC), (nrow(x) - N)/nrow(x))
      x[abs(x$log2.FC) >= q,]
    })
    de.data <- rbind(tops[[1]], tops[[2]]) 
  }
  
  return(de.data)
                                                   
}

CL.writeUpDown <- function(de.data, fname=NULL) {
  write.table(de.data[de.data$rel=="up",], paste(cuffdiff.path, paste(fname, "up", sep="_"), sep="/"),
              quote=FALSE, sep="\t", row.names=FALSE, col.names=TRUE)
  write.table(de.data[de.data$rel=="down",], paste(cuffdiff.path, paste(fname, "down", sep="_"), sep="/"),
              quote=FALSE, sep="\t", row.names=FALSE, col.names=TRUE)
}

CL.writeUpDownPositions <- function(de.data, fname=NULL) {
  up <- CL.getPositions(de.data[de.data$rel=="up",])
  down <- CL.getPositions(de.data[de.data$rel=="down",])
  write.table(up, paste(cuffdiff.path, paste(fname, "up", sep="_"), sep="/"),
              quote=FALSE, sep="\t", row.names=FALSE, col.names=FALSE)
  write.table(down, paste(cuffdiff.path, paste(fname, "down", sep="_"), sep="/"),
              quote=FALSE, sep="\t", row.names=FALSE, col.names=FALSE)
}

CL.getPositions <- function(de.data) {
  locus <- de.data$locus
  locus1 <- str_split(locus, ":")
  locus.chr <- unlist(lapply(locus1, function(x) x[1]))
  locus.pos <- unlist(lapply(locus1, function(x) x[2]))
  locus2 <- str_split(locus.pos, "-")
  locus.start <- unlist(lapply(locus2, function(x) x[1]))
  locus.end <- unlist(lapply(locus2, function(x) x[2]))
  locus.out <- data.frame(locus.chr,
                          as.numeric(locus.start),
                          as.numeric(locus.end),
                          as.character(de.data$test_id),
                          0,
                          as.character(de.data$strand))
  return(locus.out)
  
}

CL.volcano <- function(data, sample='value_1', filt.FDR=0.05, filt.ratio=1, title="", fname=NULL) {
  require(ggplot2)
  data <- data[log(data$value_1) >= 0 | log(data$value_2) >=0,]
  data.log2 <- log(data$value_2 / data$value_1,2)
  data.q <- -log(data$q_value)
  #data.q <- -log(p.adjust(data.p, method="BH"), 10)
  df <- data.frame(ratio=data.log2, pval=data.q)
  df <- df[is.finite(df$pval) & is.finite(df$ratio),]
  df$sig <- FALSE
  df$sig[df$pval >= filt.FDR & df$ratio >= filt.ratio |
         df$pval >= filt.FDR & df$ratio <= -filt.ratio] <- TRUE
#  return(df)
  if (is.null(fname)) {
    x11()
  } else {
   print(paste(plot.path, fname, sep="/"))
    pdf(file=paste(plot.path, fname, sep="/"), 7, 7)
  }  
  gp <- ggplot(df, aes(ratio, pval, color=sig))
  gp + geom_point(alpha=I(1/4)) + scale_color_manual("sig",
                    c("FALSE" = "black", "TRUE" = "red"))
  last_plot() + scale_x_continuous("log2 FPKM 2/FPKM1") + scale_y_continuous("-log10 adjusted p-values")
  print(last_plot() + opts(title=title,
                     panel.grid.minor = theme_blank(),
                     panel.grid.major = theme_blank(),
                     panel.background = theme_blank()))
  
}

RNA.boxplot <- function(data) {
  require(RColorBrewer)
  cols <- brewer.pal(3, "Dark2")
  ylim <- c(-10, 12)
#  layout(t(c(1,2)), widths=c(1,2))
                                        #par(mfrow=c(1,2), mar=c(2,1,2,0))
  bwx <- .4
  plot(1,1, xlim=c(0, 3), ylim=ylim, type="n", axes=FALSE, ann=FALSE)
  abline(h=0, col="light grey", lty=2)
  boxplot(data$value[!data$mk4], axes=FALSE, ylim=ylim, boxwex=bwx, col=cols[1], add=TRUE, at=1)
  axis(2)
  boxplot(value~hmc, data=data, subset=mk4 & hmc!="down", ylim=ylim, boxwex=.2, axes=F, at=c(1.5, 2.5), col=cols[2:3], add=TRUE)
  #abline(h=0, col="light grey", lty=2)
}

id2names <- function(id) {
  code <- read.delim("/seq/lib/roi/refgene_names")
  m <- match(id, code[,1])
  names <- code[m,2]
  return(names)
}

id2strand <- function(id) {
  code <- read.delim("/seq/lib/roi/refgene_names")
  m <- match(id, code[,2])
  strand <- code[m,3]
  return(strand)
}
